# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smarthouse.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module smarthouse
_M_smarthouse = Ice.openModule('smarthouse')
__name__ = 'smarthouse'

if 'ServerError' not in _M_smarthouse.__dict__:
    _M_smarthouse.ServerError = Ice.createTempClass()
    class ServerError(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthouse::ServerError'

    _M_smarthouse._t_ServerError = IcePy.defineException('::smarthouse::ServerError', ServerError, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    ServerError._ice_type = _M_smarthouse._t_ServerError

    _M_smarthouse.ServerError = ServerError
    del ServerError

if 'ClientError' not in _M_smarthouse.__dict__:
    _M_smarthouse.ClientError = Ice.createTempClass()
    class ClientError(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthouse::ClientError'

    _M_smarthouse._t_ClientError = IcePy.defineException('::smarthouse::ClientError', ClientError, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    ClientError._ice_type = _M_smarthouse._t_ClientError

    _M_smarthouse.ClientError = ClientError
    del ClientError

if 'coffeeOptions' not in _M_smarthouse.__dict__:
    _M_smarthouse.coffeeOptions = Ice.createTempClass()
    class coffeeOptions(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    coffeeOptions.LATTE = coffeeOptions("LATTE", 0)
    coffeeOptions.ESPRESSO = coffeeOptions("ESPRESSO", 1)
    coffeeOptions.AMERICANO = coffeeOptions("AMERICANO", 2)
    coffeeOptions.CAPUCCINO = coffeeOptions("CAPUCCINO", 3)
    coffeeOptions._enumerators = { 0:coffeeOptions.LATTE, 1:coffeeOptions.ESPRESSO, 2:coffeeOptions.AMERICANO, 3:coffeeOptions.CAPUCCINO }

    _M_smarthouse._t_coffeeOptions = IcePy.defineEnum('::smarthouse::coffeeOptions', coffeeOptions, (), coffeeOptions._enumerators)

    _M_smarthouse.coffeeOptions = coffeeOptions
    del coffeeOptions

if '_t_StringSequene' not in _M_smarthouse.__dict__:
    _M_smarthouse._t_StringSequene = IcePy.defineSequence('::smarthouse::StringSequene', (), IcePy._t_string)

if 'Coffee' not in _M_smarthouse.__dict__:
    _M_smarthouse.Coffee = Ice.createTempClass()
    class Coffee(object):
        def __init__(self, coffeeType=_M_smarthouse.coffeeOptions.LATTE, coffeePower=0.0, withMilk=False):
            self.coffeeType = coffeeType
            self.coffeePower = coffeePower
            self.withMilk = withMilk

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_smarthouse.Coffee):
                return NotImplemented
            else:
                if self.coffeeType != other.coffeeType:
                    return False
                if self.coffeePower != other.coffeePower:
                    return False
                if self.withMilk != other.withMilk:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_smarthouse._t_Coffee)

        __repr__ = __str__

    _M_smarthouse._t_Coffee = IcePy.defineStruct('::smarthouse::Coffee', Coffee, (), (
        ('coffeeType', (), _M_smarthouse._t_coffeeOptions),
        ('coffeePower', (), IcePy._t_double),
        ('withMilk', (), IcePy._t_bool)
    ))

    _M_smarthouse.Coffee = Coffee
    del Coffee

_M_smarthouse._t_SmartFridge = IcePy.defineValue('::smarthouse::SmartFridge', Ice.Value, -1, (), False, True, None, ())

if 'SmartFridgePrx' not in _M_smarthouse.__dict__:
    _M_smarthouse.SmartFridgePrx = Ice.createTempClass()
    class SmartFridgePrx(Ice.ObjectPrx):

        def putItems(self, userItems, context=None):
            return _M_smarthouse.SmartFridge._op_putItems.invoke(self, ((userItems, ), context))

        def putItemsAsync(self, userItems, context=None):
            return _M_smarthouse.SmartFridge._op_putItems.invokeAsync(self, ((userItems, ), context))

        def begin_putItems(self, userItems, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.SmartFridge._op_putItems.begin(self, ((userItems, ), _response, _ex, _sent, context))

        def end_putItems(self, _r):
            return _M_smarthouse.SmartFridge._op_putItems.end(self, _r)

        def getItems(self, userItems, context=None):
            return _M_smarthouse.SmartFridge._op_getItems.invoke(self, ((userItems, ), context))

        def getItemsAsync(self, userItems, context=None):
            return _M_smarthouse.SmartFridge._op_getItems.invokeAsync(self, ((userItems, ), context))

        def begin_getItems(self, userItems, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.SmartFridge._op_getItems.begin(self, ((userItems, ), _response, _ex, _sent, context))

        def end_getItems(self, _r):
            return _M_smarthouse.SmartFridge._op_getItems.end(self, _r)

        def changeTemperature(self, temperature, context=None):
            return _M_smarthouse.SmartFridge._op_changeTemperature.invoke(self, ((temperature, ), context))

        def changeTemperatureAsync(self, temperature, context=None):
            return _M_smarthouse.SmartFridge._op_changeTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_changeTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.SmartFridge._op_changeTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_changeTemperature(self, _r):
            return _M_smarthouse.SmartFridge._op_changeTemperature.end(self, _r)

        def checkFreeSpace(self, context=None):
            return _M_smarthouse.SmartFridge._op_checkFreeSpace.invoke(self, ((), context))

        def checkFreeSpaceAsync(self, context=None):
            return _M_smarthouse.SmartFridge._op_checkFreeSpace.invokeAsync(self, ((), context))

        def begin_checkFreeSpace(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.SmartFridge._op_checkFreeSpace.begin(self, ((), _response, _ex, _sent, context))

        def end_checkFreeSpace(self, _r):
            return _M_smarthouse.SmartFridge._op_checkFreeSpace.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthouse.SmartFridgePrx.ice_checkedCast(proxy, '::smarthouse::SmartFridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthouse.SmartFridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthouse::SmartFridge'
    _M_smarthouse._t_SmartFridgePrx = IcePy.defineProxy('::smarthouse::SmartFridge', SmartFridgePrx)

    _M_smarthouse.SmartFridgePrx = SmartFridgePrx
    del SmartFridgePrx

    _M_smarthouse.SmartFridge = Ice.createTempClass()
    class SmartFridge(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthouse::SmartFridge')

        def ice_id(self, current=None):
            return '::smarthouse::SmartFridge'

        @staticmethod
        def ice_staticId():
            return '::smarthouse::SmartFridge'

        def putItems(self, userItems, current=None):
            raise NotImplementedError("servant method 'putItems' not implemented")

        def getItems(self, userItems, current=None):
            raise NotImplementedError("servant method 'getItems' not implemented")

        def changeTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'changeTemperature' not implemented")

        def checkFreeSpace(self, current=None):
            raise NotImplementedError("servant method 'checkFreeSpace' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthouse._t_SmartFridgeDisp)

        __repr__ = __str__

    _M_smarthouse._t_SmartFridgeDisp = IcePy.defineClass('::smarthouse::SmartFridge', SmartFridge, (), None, ())
    SmartFridge._ice_type = _M_smarthouse._t_SmartFridgeDisp

    SmartFridge._op_putItems = IcePy.Operation('putItems', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_smarthouse._t_StringSequene, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))
    SmartFridge._op_getItems = IcePy.Operation('getItems', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_smarthouse._t_StringSequene, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))
    SmartFridge._op_changeTemperature = IcePy.Operation('changeTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))
    SmartFridge._op_checkFreeSpace = IcePy.Operation('checkFreeSpace', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_smarthouse.SmartFridge = SmartFridge
    del SmartFridge

_M_smarthouse._t_CoffeeExpress = IcePy.defineValue('::smarthouse::CoffeeExpress', Ice.Value, -1, (), False, True, None, ())

if 'CoffeeExpressPrx' not in _M_smarthouse.__dict__:
    _M_smarthouse.CoffeeExpressPrx = Ice.createTempClass()
    class CoffeeExpressPrx(Ice.ObjectPrx):

        def makeCoffee(self, coffe, context=None):
            return _M_smarthouse.CoffeeExpress._op_makeCoffee.invoke(self, ((coffe, ), context))

        def makeCoffeeAsync(self, coffe, context=None):
            return _M_smarthouse.CoffeeExpress._op_makeCoffee.invokeAsync(self, ((coffe, ), context))

        def begin_makeCoffee(self, coffe, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.CoffeeExpress._op_makeCoffee.begin(self, ((coffe, ), _response, _ex, _sent, context))

        def end_makeCoffee(self, _r):
            return _M_smarthouse.CoffeeExpress._op_makeCoffee.end(self, _r)

        def refillWater(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_refillWater.invoke(self, ((), context))

        def refillWaterAsync(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_refillWater.invokeAsync(self, ((), context))

        def begin_refillWater(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.CoffeeExpress._op_refillWater.begin(self, ((), _response, _ex, _sent, context))

        def end_refillWater(self, _r):
            return _M_smarthouse.CoffeeExpress._op_refillWater.end(self, _r)

        def refillMilk(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_refillMilk.invoke(self, ((), context))

        def refillMilkAsync(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_refillMilk.invokeAsync(self, ((), context))

        def begin_refillMilk(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.CoffeeExpress._op_refillMilk.begin(self, ((), _response, _ex, _sent, context))

        def end_refillMilk(self, _r):
            return _M_smarthouse.CoffeeExpress._op_refillMilk.end(self, _r)

        def checkWaterLevel(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_checkWaterLevel.invoke(self, ((), context))

        def checkWaterLevelAsync(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_checkWaterLevel.invokeAsync(self, ((), context))

        def begin_checkWaterLevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.CoffeeExpress._op_checkWaterLevel.begin(self, ((), _response, _ex, _sent, context))

        def end_checkWaterLevel(self, _r):
            return _M_smarthouse.CoffeeExpress._op_checkWaterLevel.end(self, _r)

        def checkMilkLevel(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_checkMilkLevel.invoke(self, ((), context))

        def checkMilkLevelAsync(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_checkMilkLevel.invokeAsync(self, ((), context))

        def begin_checkMilkLevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.CoffeeExpress._op_checkMilkLevel.begin(self, ((), _response, _ex, _sent, context))

        def end_checkMilkLevel(self, _r):
            return _M_smarthouse.CoffeeExpress._op_checkMilkLevel.end(self, _r)

        def cleanExpress(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_cleanExpress.invoke(self, ((), context))

        def cleanExpressAsync(self, context=None):
            return _M_smarthouse.CoffeeExpress._op_cleanExpress.invokeAsync(self, ((), context))

        def begin_cleanExpress(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthouse.CoffeeExpress._op_cleanExpress.begin(self, ((), _response, _ex, _sent, context))

        def end_cleanExpress(self, _r):
            return _M_smarthouse.CoffeeExpress._op_cleanExpress.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthouse.CoffeeExpressPrx.ice_checkedCast(proxy, '::smarthouse::CoffeeExpress', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthouse.CoffeeExpressPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthouse::CoffeeExpress'
    _M_smarthouse._t_CoffeeExpressPrx = IcePy.defineProxy('::smarthouse::CoffeeExpress', CoffeeExpressPrx)

    _M_smarthouse.CoffeeExpressPrx = CoffeeExpressPrx
    del CoffeeExpressPrx

    _M_smarthouse.CoffeeExpress = Ice.createTempClass()
    class CoffeeExpress(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthouse::CoffeeExpress')

        def ice_id(self, current=None):
            return '::smarthouse::CoffeeExpress'

        @staticmethod
        def ice_staticId():
            return '::smarthouse::CoffeeExpress'

        def makeCoffee(self, coffe, current=None):
            raise NotImplementedError("servant method 'makeCoffee' not implemented")

        def refillWater(self, current=None):
            raise NotImplementedError("servant method 'refillWater' not implemented")

        def refillMilk(self, current=None):
            raise NotImplementedError("servant method 'refillMilk' not implemented")

        def checkWaterLevel(self, current=None):
            raise NotImplementedError("servant method 'checkWaterLevel' not implemented")

        def checkMilkLevel(self, current=None):
            raise NotImplementedError("servant method 'checkMilkLevel' not implemented")

        def cleanExpress(self, current=None):
            raise NotImplementedError("servant method 'cleanExpress' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthouse._t_CoffeeExpressDisp)

        __repr__ = __str__

    _M_smarthouse._t_CoffeeExpressDisp = IcePy.defineClass('::smarthouse::CoffeeExpress', CoffeeExpress, (), None, ())
    CoffeeExpress._ice_type = _M_smarthouse._t_CoffeeExpressDisp

    CoffeeExpress._op_makeCoffee = IcePy.Operation('makeCoffee', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_smarthouse._t_Coffee, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))
    CoffeeExpress._op_refillWater = IcePy.Operation('refillWater', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))
    CoffeeExpress._op_refillMilk = IcePy.Operation('refillMilk', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))
    CoffeeExpress._op_checkWaterLevel = IcePy.Operation('checkWaterLevel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    CoffeeExpress._op_checkMilkLevel = IcePy.Operation('checkMilkLevel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    CoffeeExpress._op_cleanExpress = IcePy.Operation('cleanExpress', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_smarthouse._t_ServerError,))

    _M_smarthouse.CoffeeExpress = CoffeeExpress
    del CoffeeExpress

# End of module smarthouse
