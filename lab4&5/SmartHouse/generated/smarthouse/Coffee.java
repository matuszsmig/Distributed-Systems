//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package smarthouse;

public class Coffee implements java.lang.Cloneable,
                               java.io.Serializable
{
    public coffeeOptions coffeeType;

    public double coffeePower;

    public boolean withMilk;

    public Coffee()
    {
        this.coffeeType = coffeeOptions.LATTE;
    }

    public Coffee(coffeeOptions coffeeType, double coffeePower, boolean withMilk)
    {
        this.coffeeType = coffeeType;
        this.coffeePower = coffeePower;
        this.withMilk = withMilk;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Coffee r = null;
        if(rhs instanceof Coffee)
        {
            r = (Coffee)rhs;
        }

        if(r != null)
        {
            if(this.coffeeType != r.coffeeType)
            {
                if(this.coffeeType == null || r.coffeeType == null || !this.coffeeType.equals(r.coffeeType))
                {
                    return false;
                }
            }
            if(this.coffeePower != r.coffeePower)
            {
                return false;
            }
            if(this.withMilk != r.withMilk)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::smarthouse::Coffee");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, coffeeType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, coffeePower);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, withMilk);
        return h_;
    }

    public Coffee clone()
    {
        Coffee c = null;
        try
        {
            c = (Coffee)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        coffeeOptions.ice_write(ostr, this.coffeeType);
        ostr.writeDouble(this.coffeePower);
        ostr.writeBool(this.withMilk);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.coffeeType = coffeeOptions.ice_read(istr);
        this.coffeePower = istr.readDouble();
        this.withMilk = istr.readBool();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Coffee v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Coffee ice_read(com.zeroc.Ice.InputStream istr)
    {
        Coffee v = new Coffee();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Coffee> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Coffee v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Coffee> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Coffee.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Coffee _nullMarshalValue = new Coffee();

    /** @hidden */
    public static final long serialVersionUID = 361192635L;
}
